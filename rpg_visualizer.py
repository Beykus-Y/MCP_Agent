# rpg_visualizer.py (–í–µ—Ä—Å–∏—è 1.1 - –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è)
import sys
import os
import requests
import json
from PyQt5 import QtWidgets, QtCore, QtGui
from dotenv import load_dotenv

# --- –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è ---
load_dotenv()
RPG_MCP_PORT = os.getenv("MCP_RPG_PORT", "8008")
RPG_MCP_URL = f"http://127.0.0.1:{RPG_MCP_PORT}/mcp"
MAP_SIZE = 11  # –†–∞–∑–º–µ—Ä –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–π –∫–∞—Ä—Ç—ã (–Ω–µ—á–µ—Ç–Ω–æ–µ —á–∏—Å–ª–æ –¥–ª—è —Ü–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏—è)
UPDATE_INTERVAL = 3000 # 3 —Å–µ–∫—É–Ω–¥—ã

# --- –¶–≤–µ—Ç–∞ –∏ –∏–∫–æ–Ω–∫–∏ –¥–ª—è –∫–∞—Ä—Ç—ã ---
TERRAIN_COLORS = {
    "plains": "#a1c45a",
    "forest": "#2a6141",
    "fort": "#808080",
    "default": "#d3d3d3"
}
PLAYER_ICON = "üë§"
NPC_ICON = "ü§ñ"

class RPGVisualizer(QtWidgets.QWidget):
    def __init__(self, player_id):
        super().__init__()
        
        if not player_id:
            raise ValueError("–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å ID –∏–≥—Ä–æ–∫–∞!")
        
        ### –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º save_id –∫–∞–∫ None ###
        self.save_id = None
        self.player_id = int(player_id)
        
        # –î–∞–Ω–Ω—ã–µ, –∫–æ—Ç–æ—Ä—ã–µ –º—ã –±—É–¥–µ–º –æ–±–Ω–æ–≤–ª—è—Ç—å
        self.player_data = {}
        self.inventory_data = []
        self.map_data = {} # { (x, y): details, ... }

        # –¢–µ–ø–µ—Ä—å —ç—Ç–∞ —Å—Ç—Ä–æ–∫–∞ –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å, —Ç.–∫. self.save_id —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        self.setWindowTitle(f"RPG Visualizer - –ó–∞–≥—Ä—É–∑–∫–∞...")
        self.setup_ui()
        self.resize(600, 600)

        # –¢–∞–π–º–µ—Ä –¥–ª—è –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
        self.timer = QtCore.QTimer(self)
        self.timer.timeout.connect(self.update_all_data)
        self.timer.start(UPDATE_INTERVAL)
        
        # –ü–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
        self.update_all_data()

    def setup_ui(self):
        main_layout = QtWidgets.QVBoxLayout(self)
        
        # --- –°–µ–∫—Ü–∏—è —Å—Ç–∞—Ç—É—Å–∞ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ ---
        status_box = QtWidgets.QGroupBox("–°—Ç–∞—Ç—É—Å –ü–µ—Ä—Å–æ–Ω–∞–∂–∞")
        status_layout = QtWidgets.QFormLayout()
        self.name_label = QtWidgets.QLabel("–ó–∞–≥—Ä—É–∑–∫–∞...")
        self.hp_label = QtWidgets.QLabel("–ó–∞–≥—Ä—É–∑–∫–∞...")
        self.location_label = QtWidgets.QLabel("–ó–∞–≥—Ä—É–∑–∫–∞...")
        status_layout.addRow("–ò–º—è:", self.name_label)
        status_layout.addRow("HP:", self.hp_label)
        status_layout.addRow("–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã:", self.location_label)
        status_box.setLayout(status_layout)

        # --- –°–µ–∫—Ü–∏—è –∫–∞—Ä—Ç—ã ---
        map_box = QtWidgets.QGroupBox("–ö–∞—Ä—Ç–∞")
        self.map_grid_layout = QtWidgets.QGridLayout()
        self.map_grid_layout.setSpacing(1)
        self.map_labels = {}
        for y in range(MAP_SIZE):
            for x in range(MAP_SIZE):
                label = QtWidgets.QLabel("?")
                label.setFixedSize(40, 40)
                label.setAlignment(QtCore.Qt.AlignCenter)
                label.setStyleSheet("border: 1px solid grey; font-size: 18px;")
                self.map_grid_layout.addWidget(label, y, x)
                self.map_labels[(x, y)] = label
        map_box.setLayout(self.map_grid_layout)

        # --- –°–µ–∫—Ü–∏—è –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è ---
        inventory_box = QtWidgets.QGroupBox("–ò–Ω–≤–µ–Ω—Ç–∞—Ä—å")
        inventory_layout = QtWidgets.QVBoxLayout()
        self.inventory_list = QtWidgets.QListWidget()
        inventory_layout.addWidget(self.inventory_list)
        inventory_box.setLayout(inventory_layout)

        main_layout.addWidget(status_box)
        main_layout.addWidget(map_box)
        main_layout.addWidget(inventory_box, stretch=1)

    def _mcp_call(self, method, params):
        """–í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–∑–æ–≤–∞ MCP_RPG."""
        try:
            payload = {"jsonrpc": "2.0", "id": 1, "method": method, "params": params}
            response = requests.post(RPG_MCP_URL, json=payload, timeout=2)
            response.raise_for_status()
            data = response.json()
            if "error" in data:
                print(f"–û—à–∏–±–∫–∞ –æ—Ç MCP: {data['error']['message']}")
                return None
            return data.get("result")
        except requests.exceptions.RequestException as e:
            # –î–µ–ª–∞–µ–º –≤—ã–≤–æ–¥ –æ—à–∏–±–∫–∏ –±–æ–ª–µ–µ –∑–∞–º–µ—Ç–Ω—ã–º
            print(f"!!! –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–Ø –∫ MCP_RPG: {e}")
            self.statusBar().showMessage("–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ MCP_RPG!", 5000) if hasattr(self, 'statusBar') else None
            return None

    @QtCore.pyqtSlot()
    def update_all_data(self):
        """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –æ—Ç MCP –∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç UI."""
        
        # 1. –ï—Å–ª–∏ –Ω–µ –∑–Ω–∞–µ–º ID —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è, —Å–Ω–∞—á–∞–ª–∞ —É–∑–Ω–∞–µ–º –µ–≥–æ
        if self.save_id is None:
            active_game_data = self._mcp_call("get_active_game", {})
            if active_game_data and active_game_data.get("status") == "ok":
                self.save_id = active_game_data.get("active_save_id")
                # –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫, –∫–æ–≥–¥–∞ ID —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è –∏–∑–≤–µ—Å—Ç–µ–Ω
                self.setWindowTitle(f"RPG Visualizer - –ò–≥—Ä–∞ #{self.save_id}")
            else:
                self.setWindowTitle(f"RPG Visualizer - –ê–∫—Ç–∏–≤–Ω–∞—è –∏–≥—Ä–∞ –Ω–µ –≤—ã–±—Ä–∞–Ω–∞")
                return # –ü—Ä–µ—Ä—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ, –µ—Å–ª–∏ –Ω–µ –∑–Ω–∞–µ–º, —Å –∫–∞–∫–æ–π –∏–≥—Ä–æ–π —Ä–∞–±–æ—Ç–∞—Ç—å

        # 2. –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
        player_data = self._mcp_call("get_character_details", {"character_id": self.player_id})
        if player_data: self.player_data = player_data
        
        # 3. –ü–æ–ª—É—á–∞–µ–º –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å
        inventory_data = self._mcp_call("get_inventory", {"character_id": self.player_id})
        if inventory_data: self.inventory_data = inventory_data.get("inventory", [])

        # 4. –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –ª–æ–∫–∞—Ü–∏—è—Ö –≤–æ–∫—Ä—É–≥ –∏–≥—Ä–æ–∫–∞
        if "location_x" in self.player_data and self.save_id is not None:
            center_x, center_y = self.player_data["location_x"], self.player_data["location_y"]
            radius = MAP_SIZE // 2
            for y_offset in range(-radius, radius + 1):
                for x_offset in range(-radius, radius + 1):
                    x, y = center_x + x_offset, center_y + y_offset
                    # –ü–µ—Ä–µ–¥–∞–µ–º save_id –≤ get_location_details, —Ç.–∫. –æ–Ω —É –Ω–∞—Å —É–∂–µ –µ—Å—Ç—å
                    loc_data = self._mcp_call("get_location_details", {"save_id": self.save_id, "x": x, "y": y})
                    if loc_data and loc_data.get("status") == "ok":
                        self.map_data[(x, y)] = loc_data.get("details")

        # –ü–æ—Å–ª–µ —Å–±–æ—Ä–∞ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö, –æ–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
        self.refresh_ui()

    def refresh_ui(self):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –≤—Å–µ –≤–∏–¥–∂–µ—Ç—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö."""
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
        self.name_label.setText(self.player_data.get("name", "N/A"))
        self.hp_label.setText(f"{self.player_data.get('hp', 0)} / {self.player_data.get('max_hp', 0)}")
        self.location_label.setText(f"({self.player_data.get('location_x', 0)}, {self.player_data.get('location_y', 0)})")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å
        self.inventory_list.clear()
        for item in self.inventory_data:
            self.inventory_list.addItem(f"{item['item_name']} (x{item.get('quantity', 1)})")

        # –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞—Ä—Ç—É
        if "location_x" in self.player_data:
            center_x, center_y = self.player_data["location_x"], self.player_data["location_y"]
            radius = MAP_SIZE // 2
            for y_map in range(MAP_SIZE):
                for x_map in range(MAP_SIZE):
                    world_x = center_x - radius + x_map
                    world_y = center_y - radius + y_map
                    
                    label = self.map_labels[(x_map, y_map)]
                    loc_details = self.map_data.get((world_x, world_y))
                    
                    icon = ""
                    if world_x == center_x and world_y == center_y:
                        icon = PLAYER_ICON
                    
                    if loc_details:
                        terrain = loc_details.get("terrain", "default").lower()
                        color = TERRAIN_COLORS.get(terrain, TERRAIN_COLORS["default"])
                        label.setStyleSheet(f"background-color: {color}; border: 1px solid grey; font-size: 18px;")
                        label.setToolTip(loc_details.get("name", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"))
                    else:
                        label.setStyleSheet("background-color: #333; border: 1px solid grey; color: #555;")
                        label.setToolTip("–ù–µ–∏–∑–≤–µ–¥–∞–Ω–Ω–∞—è –æ–±–ª–∞—Å—Ç—å")

                    label.setText(icon)

if __name__ == "__main__":
    app = QtWidgets.QApplication(sys.argv)
    
    dialog = QtWidgets.QInputDialog()
    player_id_str, ok = dialog.getText(None, "–í–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö", "–í–≤–µ–¥–∏—Ç–µ ID –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –∏–≥—Ä–æ–∫–∞ (character_id):")

    if ok and player_id_str.isdigit():
        window = RPGVisualizer(player_id=player_id_str)
        window.show()
        sys.exit(app.exec_())
    else:
        print("–ù–µ–≤–µ—Ä–Ω—ã–π –≤–≤–æ–¥. –í–∏–∑—É–∞–ª–∏–∑–∞—Ç–æ—Ä –Ω–µ –±—É–¥–µ—Ç –∑–∞–ø—É—â–µ–Ω.")
        sys.exit(0)