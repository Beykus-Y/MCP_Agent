# rpg/world/generator.py
import time
import random
import json
import os 
from dataclasses import asdict

from .world_state import WorldState
from .geography import generate_world_map
from .history import generate_history
from .nomenclator import Nomenclator

WORLD_SAVES_DIR = os.path.join(os.path.dirname(__file__), '..', 'saves', 'worlds')

class WorldGenerator:
    def __init__(self, map_width=128, map_height=128, progress_callback=None):
        self.width = map_width
        self.height = map_height
        self.nomenclator = Nomenclator()
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–ª–±—ç–∫. –ï—Å–ª–∏ –æ–Ω –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω, —Å–æ–∑–¥–∞–µ–º "–ø—É—Å—Ç—ã—à–∫—É"
        self.report_progress = progress_callback if progress_callback else lambda msg: None

    def generate_new_world(self, params: dict, seed: int = None):
        if seed is None:
            seed = int(time.time())
        random.seed(seed)
        
        world_name = params['world_name']
        self.report_progress(f"–ù–∞—á–∞–ª–æ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –º–∏—Ä–∞ '{world_name}' (–°–∏–¥: {seed})...")
        
        world = WorldState(
            world_name=world_name, seed=seed, map_size=(self.width, self.height),
            year=params['year'], tech_level=params['tech_level'], magic_level=params['magic_level']
        )
        
        self.report_progress("–°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ç–∏–Ω–µ–Ω—Ç–æ–≤ –∏ –æ–∫–µ–∞–Ω–æ–≤...")
        world.biome_map = generate_world_map(self.width, self.height, seed)
        self.report_progress("–†–∞—Å—á–µ—Ç –±–∏–æ–º–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–ª–∏–º–∞—Ç–∞...")
        
        self.report_progress("–°–∏–º—É–ª—è—Ü–∏—è –¥—Ä–µ–≤–Ω–µ–π –∏—Å—Ç–æ—Ä–∏–∏...")
        # üëá –ü–µ—Ä–µ–¥–∞–µ–º –∫–æ–ª–±—ç–∫ –¥–∞–ª—å—à–µ üëá
        factions, pois, history_log = generate_history(
            world.biome_map, self.nomenclator, params, self.report_progress
        )
        world.factions = factions
        world.points_of_interest = pois
        world.history_log = history_log
        
        self.report_progress("–î–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è –º–∏—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")
        return world

    def save_world(self, world: WorldState):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –º–∏—Ä –≤ —Ñ–∞–π–ª –≤ –ø–∞–ø–∫—É saves/worlds."""
        
        # --- –ò–ó–ú–ï–ù–ï–ù–ò–ï: –†–∞–±–æ—Ç–∞–µ–º —Å –Ω–æ–≤–æ–π –ø–∞–ø–∫–æ–π ---
        if not os.path.exists(WORLD_SAVES_DIR):
            os.makedirs(WORLD_SAVES_DIR)

        filename = f"{world.world_name.replace(' ', '_')}.world"
        filepath = os.path.join(WORLD_SAVES_DIR, filename)

        self.report_progress(f"–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –º–∏—Ä–∞ –≤ —Ñ–∞–π–ª: {filepath}...")
        try:
            world_data = asdict(world)
            with open(filepath, 'w', encoding='utf-8') as f:
                json.dump(world_data, f, ensure_ascii=False, indent=4)
            self.report_progress("–ú–∏—Ä —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω.")
            return filepath
        except Exception as e:
            self.report_progress(f"[!!!] –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –º–∏—Ä–∞: {e}")
            return None